"use client"

import { Button } from "@/components/ui/button"
import { Download, Printer } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

interface PlanExportProps {
  planData: any
}

export function PlanExport({ planData }: PlanExportProps) {
  const { toast } = useToast()

  const generatePDFReport = () => {
    const recommendations = planData.data
    
    const reportContent = `
ÉCOLOOP FARM RECOMMENDATIONS REPORT
===================================

Generated: ${new Date().toLocaleDateString()}

RECOMMENDED SETUP
-----------------
- Chickens Recommended: ${recommendations.summary.nb_poulets_optimal}
- Total Investment: ${recommendations.summary.investment_total.toLocaleString()} FCFA
- Expected Profit: ${recommendations.summary.profit_estime.toLocaleString()} FCFA
- ROI: ${recommendations.summary.roi_percentage}%
- Cycle Duration: ${recommendations.summary.duree_cycle}
- Profitable: ${recommendations.summary.rentable ? 'Yes' : 'No'}

COST BREAKDOWN
--------------
- Chicks: ${recommendations.cost_breakdown.poussins.toLocaleString()} FCFA
- Feed: ${recommendations.cost_breakdown.alimentation.toLocaleString()} FCFA
- Medicine: ${recommendations.cost_breakdown.medicaments.toLocaleString()} FCFA
- Miscellaneous: ${recommendations.cost_breakdown.divers.toLocaleString()} FCFA
- Safety Buffer: ${recommendations.cost_breakdown.buffer_mortalite.toLocaleString()} FCFA

PROFITABILITY ANALYSIS
----------------------
- Surviving Chickens: ${recommendations.profitability.poulets_survivants}
- Total Revenue: ${recommendations.profitability.chiffre_affaires.toLocaleString()} FCFA
- Net Profit: ${recommendations.profitability.benefice_net.toLocaleString()} FCFA
- Profit per Chicken: ${recommendations.profitability.benefice_par_poulet.toLocaleString()} FCFA
- Break-even Point: ${recommendations.profitability.seuil_rentabilite} chickens

AI RECOMMENDATIONS
------------------
${recommendations.recommendations?.map((rec: string) => `- ${rec}`).join('\n') || 'No specific recommendations available'}

Generated by Éco Loop - ${new Date().toLocaleString()}
    `

    const blob = new Blob([reportContent], { type: 'text/plain' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `ecoloop-recommendations-${Date.now()}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    window.URL.revokeObjectURL(url)

    toast({
      title: "Report Downloaded",
      description: "Farm recommendations report has been downloaded",
    })
  }

  const printReport = () => {
    const recommendations = planData.data
    
    const printContent = `
      <html>
        <head>
          <title>Éco Loop Farm Recommendations</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; border-bottom: 2px solid #52b788; padding-bottom: 10px; margin-bottom: 20px; }
            .section { margin-bottom: 20px; }
            .section h3 { color: #52b788; border-bottom: 1px solid #eee; padding-bottom: 5px; }
            .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
            .metric { background: #f8f9fa; padding: 10px; border-radius: 5px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Éco Loop Farm Recommendations</h1>
            <p>Generated on ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div class="section">
            <h3>Recommended Setup</h3>
            <div class="grid">
              <div class="metric">
                <strong>Chickens:</strong> ${recommendations.summary.nb_poulets_optimal}
              </div>
              <div class="metric">
                <strong>Investment:</strong> ${recommendations.summary.investment_total.toLocaleString()} FCFA
              </div>
              <div class="metric">
                <strong>Expected Profit:</strong> ${recommendations.summary.profit_estime.toLocaleString()} FCFA
              </div>
              <div class="metric">
                <strong>ROI:</strong> ${recommendations.summary.roi_percentage}%
              </div>
            </div>
          </div>

          <div class="section">
            <h3>Cost Breakdown</h3>
            <div class="grid">
              <div class="metric">
                <strong>Chicks:</strong> ${recommendations.cost_breakdown.poussins.toLocaleString()} FCFA
              </div>
              <div class="metric">
                <strong>Feed:</strong> ${recommendations.cost_breakdown.alimentation.toLocaleString()} FCFA
              </div>
              <div class="metric">
                <strong>Medicine:</strong> ${recommendations.cost_breakdown.medicaments.toLocaleString()} FCFA
              </div>
              <div class="metric">
                <strong>Miscellaneous:</strong> ${recommendations.cost_breakdown.divers.toLocaleString()} FCFA
              </div>
            </div>
          </div>

          <div class="section">
            <h3>AI Recommendations</h3>
            <ul>
              ${recommendations.recommendations?.map((rec: string) => `<li>${rec}</li>`).join('') || '<li>No specific recommendations available</li>'}
            </ul>
          </div>
        </body>
      </html>
    `

    const printWindow = window.open('', '_blank')
    if (printWindow) {
      printWindow.document.write(printContent)
      printWindow.document.close()
      printWindow.print()
    }

    toast({
      title: "Print Prepared",
      description: "Report opened in new window for printing",
    })
  }

  return (
    <div className="flex space-x-2">
      <Button variant="outline" onClick={generatePDFReport}>
        <Download className="h-4 w-4 mr-2" />
        Download Report
      </Button>
      <Button variant="outline" onClick={printReport}>
        <Printer className="h-4 w-4 mr-2" />
        Print Report
      </Button>
    </div>
  )
}